dE "add r0, r1, r2"                          7c011214 0x0 (seq (set r0 (+ (var r1) (var r2))) nop nop nop)
dE "addi r0, r30, 4"                         381e0004 0x0 (seq (set r0 (+ (var r30) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v)))))) nop nop nop)
dE "addic r0, r1, 1"                         30010001 0x0 (seq (set r0 (+ (var r1) (let v (bv 16 0x1) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v)))))) (set carry (ite (msb (+ (cast 65 false (var r1)) (cast 65 false (let v (bv 16 0x1) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))))) true false)) (set ca (var carry)) nop nop)
dE "addis r0, r30, 1"                        3c1e0001 0x0 (seq (set r0 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (append (bv 16 0x1) (bv 16 0x0)) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v)))))) nop nop nop)
dE "addme r0, r2"                            7c0201d4 0x0 (seq (set r0 (+ (var r2) (+ (ite (var ca) (bv 64 0x1) (bv 64 0x0)) (bv 64 0xffffffffffffffff)))) (set carry (ite (msb (+ (cast 65 false (var r2)) (cast 65 false (+ (ite (var ca) (bv 64 0x1) (bv 64 0x0)) (bv 64 0xffffffffffffffff))))) true false)) (set ca (var carry)) nop nop)
dE "addze r0, r2"                            7c020194 0x0 (seq (set r0 (+ (var r2) (ite (var ca) (bv 64 0x1) (bv 64 0x0)))) (set carry (ite (msb (+ (cast 65 false (var r2)) (cast 65 false (ite (var ca) (bv 64 0x1) (bv 64 0x0))))) true false)) (set ca (var carry)) nop nop)
dE "li r0, 1"                                38000001 0x0 (seq (set r0 (let v (bv 16 0x1) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) nop)
dE "subf r0, r1, r2"                         7c011050 0x0 (seq (set r0 (+ (+ (~ (var r1)) (bv 64 0x1)) (var r2))) nop nop nop)
dE "subfc r0, r1, r2"                        7c011010 0x0 (seq (set r0 (+ (+ (~ (var r1)) (bv 64 0x1)) (var r2))) (set carry (ite (msb (+ (cast 65 false (+ (~ (var r1)) (bv 64 0x1))) (cast 65 false (var r2)))) true false)) (set ca (var carry)) nop nop)
dE "subfic r0, r2, 1"                        20020001 0x0 (seq (set r0 (+ (+ (~ (var r2)) (bv 64 0x1)) (let v (bv 16 0x1) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v)))))) (set carry (ite (msb (+ (cast 65 false (+ (~ (var r2)) (bv 64 0x1))) (cast 65 false (let v (bv 16 0x1) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))))) true false)) (set ca (var carry)) nop nop)
dE "subfe r0, r1, r2"                        7c011110 0x0 (seq (set r0 (+ (~ (var r1)) (+ (var r2) (ite (var ca) (bv 64 0x1) (bv 64 0x0))))) (set carry (ite (msb (+ (cast 65 false (~ (var r1))) (cast 65 false (+ (var r2) (ite (var ca) (bv 64 0x1) (bv 64 0x0)))))) true false)) (set ca (var carry)) nop nop)
dE "subfme r0, r2"                           7c0201d0 0x0 (seq (set r0 (+ (~ (var r2)) (+ (ite (var ca) (bv 64 0x1) (bv 64 0x0)) (bv 64 0xffffffffffffffff)))) (set carry (ite (msb (+ (cast 65 false (~ (var r2))) (cast 65 false (+ (ite (var ca) (bv 64 0x1) (bv 64 0x0)) (bv 64 0xffffffffffffffff))))) true false)) (set ca (var carry)) nop nop)
dE "subfze r0, r2"                           7c020190 0x0 (seq (set r0 (+ (~ (var r2)) (ite (var ca) (bv 64 0x1) (bv 64 0x0)))) (set carry (ite (msb (+ (cast 65 false (~ (var r2))) (cast 65 false (ite (var ca) (bv 64 0x1) (bv 64 0x0))))) true false)) (set ca (var carry)) nop nop)
dE "lis r0, 1"                               3c000001 0x0 (seq (set r0 (let v (append (bv 16 0x1) (bv 16 0x0)) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) nop)
dE "stb r0, 4(r30)"                          981e0004 0x0 (seq (storew 0 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (cast 8 false (var r0))) nop)
dE "sth r0, 4(r30)"                          b01e0004 0x0 (seq (storew 0 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (cast 16 false (var r0))) nop)
dE "stw r0, 4(r30)"                          901e0004 0x0 (seq (storew 0 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (cast 32 false (var r0))) nop)
dE "std r0, 4(r30)"                          f81e0004 0x0 (seq (storew 0 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (append (bv 16 0x4) (bv 2 0x0)) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (cast 64 false (var r0))) nop)
dE "stbx r0, r30, r1"                        7c1e09ae 0x0 (seq (storew 0 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (var r1)) (cast 8 false (var r0))) nop)
dE "sthx r0, r30, r1"                        7c1e0b2e 0x0 (seq (storew 0 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (var r1)) (cast 16 false (var r0))) nop)
dE "stwx r0, r30, r1"                        7c1e092e 0x0 (seq (storew 0 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (var r1)) (cast 32 false (var r0))) nop)
dE "stdx r0, r30, r1"                        7c1e092a 0x0 (seq (storew 0 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (var r1)) (cast 64 false (var r0))) nop)
dE "stbu r0, 4(r30)"                         9c1e0004 0x0 (seq (storew 0 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (cast 8 false (var r0))) (set r30 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v)))))))
dE "sthu r0, 4(r30)"                         b41e0004 0x0 (seq (storew 0 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (cast 16 false (var r0))) (set r30 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v)))))))
dE "stwu r0, 4(r30)"                         941e0004 0x0 (seq (storew 0 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (cast 32 false (var r0))) (set r30 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v)))))))
dE "stdu r0, 4(r30)"                         f81e0005 0x0 (seq (storew 0 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (append (bv 16 0x4) (bv 2 0x0)) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (cast 64 false (var r0))) (set r30 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (append (bv 16 0x4) (bv 2 0x0)) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v)))))))
dE "lbz r0, 4(r30)"                          881e0004 0x0 (seq (set r0 (let ea (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (let loadw (loadw 0 8 (var ea)) (cast 64 false (var loadw))))) nop)
dE "lhz r0, 4(r30)"                          a01e0004 0x0 (seq (set r0 (let ea (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (let loadw (loadw 0 16 (var ea)) (cast 64 false (var loadw))))) nop)
dE "lwz r0, 4(r30)"                          801e0004 0x0 (seq (set r0 (let ea (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (let loadw (loadw 0 32 (var ea)) (cast 64 false (var loadw))))) nop)
dE "lbzx r0, r30, r1"                        7c1e08ae 0x0 (seq (set r0 (let ea (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (var r1)) (let loadw (loadw 0 8 (var ea)) (cast 64 false (var loadw))))) nop)
dE "lhzx r0, r30, r1"                        7c1e0a2e 0x0 (seq (set r0 (let ea (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (var r1)) (let loadw (loadw 0 16 (var ea)) (cast 64 false (var loadw))))) nop)
dE "lwzx r0, r30, r1"                        7c1e082e 0x0 (seq (set r0 (let ea (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (var r1)) (let loadw (loadw 0 32 (var ea)) (cast 64 false (var loadw))))) nop)
dE "ld r0, 4(r30)"                           e81e0004 0x0 (seq (set r0 (let ea (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (append (bv 16 0x4) (bv 2 0x0)) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (let loadw (loadw 0 64 (var ea)) (var loadw)))) nop)
dE "ldx r0, r30, r1"                         7c1e082a 0x0 (seq (set r0 (let ea (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (var r1)) (let loadw (loadw 0 64 (var ea)) (var loadw)))) nop)
dE "lha r0, 4(r30)"                          a81e0004 0x0 (seq (set r0 (let ea (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (bv 16 0x4) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (let loadw (loadw 0 16 (var ea)) (let v (var loadw) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))))) nop)
dE "lwa r0, 4(r30)"                          e81e0006 0x0 (seq (set r0 (let ea (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (append (bv 16 0x4) (bv 2 0x0)) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (let loadw (loadw 0 32 (var ea)) (let v (var loadw) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))))) nop)
dE "ldu r0, 4(r30)"                          e81e0005 0x0 (seq (set r0 (let ea (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (append (bv 16 0x4) (bv 2 0x0)) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (let loadw (loadw 0 64 (var ea)) (var loadw)))) (set r30 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (let v (append (bv 16 0x4) (bv 2 0x0)) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v)))))))
dE "ldux r0, r30, r1"                        7c1e086a 0x0 (seq (set r0 (let ea (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (var r1)) (let loadw (loadw 0 64 (var ea)) (var loadw)))) (set r30 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (var r1))))
dE "lhax r0, r30, r1"                        7c1e0aae 0x0 (seq (set r0 (let ea (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (var r1)) (let loadw (loadw 0 16 (var ea)) (let v (var loadw) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))))) nop)
dE "lwax r0, r30, r1"                        7c1e0aaa 0x0 (seq (set r0 (let ea (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (var r1)) (let loadw (loadw 0 32 (var ea)) (let v (var loadw) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))))) nop)
dE "lhaux r0, r30, r1"                       7c1e0aee 0x0 (seq (set r0 (let ea (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (var r1)) (let loadw (loadw 0 16 (var ea)) (let v (var loadw) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))))) (set r30 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (var r1))))
dE "lwaux r0, r30, r1"                       7c1e0aea 0x0 (seq (set r0 (let ea (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (var r1)) (let loadw (loadw 0 32 (var ea)) (let v (var loadw) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))))) (set r30 (+ (ite (== (var r30) (bv 64 0x0)) (bv 64 0x0) (var r30)) (var r1))))
dE "and r0, r1, r2"                          7c201038 0x0 (seq (set r0 (& (var r1) (var r2))) nop)
dE "andc r0, r1, r2"                         7c201078 0x0 (seq (set r0 (& (var r1) (~ (var r2)))) nop)
dE "andi. r0, r2, 4"                         70400004 0x0 (seq (set r0 (& (var r2) (cast 64 false (bv 16 0x4)))) (set l (& (var r2) (cast 64 false (bv 16 0x4)))) (set r (bv 64 0x0)) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (sle (var l) (var r)) (! (== (var l) (var r)))) (set cr0 (append (bv 3 0x4) (var so_flag))) (branch (! (sle (var l) (var r))) (set cr0 (append (bv 3 0x2) (var so_flag))) (set cr0 (append (bv 3 0x1) (var so_flag))))))
dE "andis. r30, r0, 4"                       741e0004 0x0 (seq (set r30 (& (var r0) (cast 64 false (append (bv 16 0x4) (bv 16 0x0))))) (set l (& (var r0) (cast 64 false (append (bv 16 0x4) (bv 16 0x0))))) (set r (bv 64 0x0)) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (sle (var l) (var r)) (! (== (var l) (var r)))) (set cr0 (append (bv 3 0x4) (var so_flag))) (branch (! (sle (var l) (var r))) (set cr0 (append (bv 3 0x2) (var so_flag))) (set cr0 (append (bv 3 0x1) (var so_flag))))))
dE "or r0, r30, r1"                          7fc00b78 0x0 (seq (set r0 (| (var r30) (var r1))) nop)
dE "orc r0, r1, r2"                          7c201338 0x0 (seq (set r0 (| (var r1) (~ (var r2)))) nop)
dE "ori r0, r30, 4"                          63c00004 0x0 (seq (set r0 (| (var r30) (cast 64 false (bv 16 0x4)))) nop)
dE "oris r0, r2, 4"                          64400004 0x0 (seq (set r0 (| (var r2) (cast 64 false (append (bv 16 0x4) (bv 16 0x0))))) nop)
dE "xor r0, r1, r2"                          7c201278 0x0 (seq (set r0 (^ (var r1) (var r2))) nop)
dE "xori r0, r30, 4"                         6bc00004 0x0 (seq (set r0 (^ (var r30) (cast 64 false (bv 16 0x4)))) nop)
dE "xoris r0, r2, 4"                         6c400004 0x0 (seq (set r0 (^ (var r2) (cast 64 false (append (bv 16 0x4) (bv 16 0x0))))) nop)
dE "nand r0, r1, r2"                         7c2013b8 0x0 (seq (set r0 (~ (& (var r1) (var r2)))) nop)
dE "nor r0, r1, r2"                          7c2010f8 0x0 (seq (set r0 (~ (| (var r1) (var r2)))) nop)
dE "cmpw r0, r1"                             7c000800 0x0 (seq (set l (cast 64 (msb (cast 32 false (var r0))) (cast 32 false (var r0)))) (set r (cast 64 (msb (cast 32 false (var r1))) (cast 32 false (var r1)))) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (sle (var l) (var r)) (! (== (var l) (var r)))) (set cr0 (append (bv 3 0x4) (var so_flag))) (branch (! (sle (var l) (var r))) (set cr0 (append (bv 3 0x2) (var so_flag))) (set cr0 (append (bv 3 0x1) (var so_flag))))))
dE "cmpd cr1, r0, r1"                        7ca00800 0x0 (seq (set l (var r0)) (set r (var r1)) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (sle (var l) (var r)) (! (== (var l) (var r)))) (set cr1 (append (bv 3 0x4) (var so_flag))) (branch (! (sle (var l) (var r))) (set cr1 (append (bv 3 0x2) (var so_flag))) (set cr1 (append (bv 3 0x1) (var so_flag))))))
dE "cmpwi cr2, r0, 0xffff"                   2d00ffff 0x0 (seq (set l (cast 64 (msb (cast 32 false (var r0))) (cast 32 false (var r0)))) (set r (cast 64 (msb (bv 16 0xffff)) (bv 16 0xffff))) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (sle (var l) (var r)) (! (== (var l) (var r)))) (set cr2 (append (bv 3 0x4) (var so_flag))) (branch (! (sle (var l) (var r))) (set cr2 (append (bv 3 0x2) (var so_flag))) (set cr2 (append (bv 3 0x1) (var so_flag))))))
dE "cmpdi cr3, r0, 1"                        2da00001 0x0 (seq (set l (var r0)) (set r (let v (bv 16 0x1) (ite (msb (var v)) (cast 64 (msb (var v)) (var v)) (cast 64 false (var v))))) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (sle (var l) (var r)) (! (== (var l) (var r)))) (set cr3 (append (bv 3 0x4) (var so_flag))) (branch (! (sle (var l) (var r))) (set cr3 (append (bv 3 0x2) (var so_flag))) (set cr3 (append (bv 3 0x1) (var so_flag))))))
dE "cmplw cr4, r0, r1"                       7e000840 0x0 (seq (set l (cast 64 (msb (cast 32 false (var r0))) (cast 32 false (var r0)))) (set r (cast 64 (msb (cast 32 false (var r1))) (cast 32 false (var r1)))) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (ule (var l) (var r)) (! (== (var l) (var r)))) (set cr4 (append (bv 3 0x4) (var so_flag))) (branch (! (ule (var l) (var r))) (set cr4 (append (bv 3 0x2) (var so_flag))) (set cr4 (append (bv 3 0x1) (var so_flag))))))
dE "cmpld cr5, r0, r1"                       7ea00840 0x0 (seq (set l (var r0)) (set r (var r1)) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (ule (var l) (var r)) (! (== (var l) (var r)))) (set cr5 (append (bv 3 0x4) (var so_flag))) (branch (! (ule (var l) (var r))) (set cr5 (append (bv 3 0x2) (var so_flag))) (set cr5 (append (bv 3 0x1) (var so_flag))))))
dE "cmplwi cr6, r0, 0"                       2b000000 0x0 (seq (set l (cast 64 (msb (cast 32 false (var r0))) (cast 32 false (var r0)))) (set r (cast 64 false (bv 16 0x0))) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (ule (var l) (var r)) (! (== (var l) (var r)))) (set cr6 (append (bv 3 0x4) (var so_flag))) (branch (! (ule (var l) (var r))) (set cr6 (append (bv 3 0x2) (var so_flag))) (set cr6 (append (bv 3 0x1) (var so_flag))))))
dE "cmpldi cr7, r0, 1"                       2ba00001 0x0 (seq (set l (var r0)) (set r (append (bv 48 0x0) (bv 16 0x1))) (set so_flag (ite (var so) (bv 1 0x1) (bv 1 0x0))) (branch (&& (ule (var l) (var r)) (! (== (var l) (var r)))) (set cr7 (append (bv 3 0x4) (var so_flag))) (branch (! (ule (var l) (var r))) (set cr7 (append (bv 3 0x2) (var so_flag))) (set cr7 (append (bv 3 0x1) (var so_flag))))))
